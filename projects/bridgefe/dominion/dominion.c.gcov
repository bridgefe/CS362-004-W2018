        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3008 returned 100% blocks executed 100%
     3008:    8:int compare(const void* a, const void* b) {
     3008:    8-block  0
     3008:    9:  if (*(int*)a > *(int*)b)
     3008:    9-block  0
branch  0 taken 510 (fallthrough)
branch  1 taken 2498
      510:   10:    return 1;
      510:   10-block  0
unconditional  0 taken 510
     2498:   11:  if (*(int*)a < *(int*)b)
     2498:   11-block  0
branch  0 taken 81 (fallthrough)
branch  1 taken 2417
       81:   12:    return -1;
       81:   12-block  0
unconditional  0 taken 81
     2417:   13:  return 0;
     2417:   13-block  0
unconditional  0 taken 2417
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 88%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        9:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   44-block  0
call    0 returned 9
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 9
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        9:   57-block  0
unconditional  0 taken 9
       90:   57-block  1
unconditional  1 taken 90
       99:   57-block  2
branch  2 taken 90
branch  3 taken 9 (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
       90:   59-block  0
unconditional  0 taken 90
      900:   59-block  1
unconditional  1 taken 900
      990:   59-block  2
branch  2 taken 900
branch  3 taken 90 (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      900:   61-block  0
branch  0 taken 810 (fallthrough)
branch  1 taken 90
      810:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 810
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        9:   73-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        8:   75-block  0
unconditional  0 taken 8
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        1:   77-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        1:   79-block  0
unconditional  0 taken 1
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
unconditional  0 never executed
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        9:   87-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        8:   91-block  0
unconditional  0 taken 8
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        1:   97-block  0
unconditional  0 taken 1
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        9:  106-block  0
unconditional  0 taken 9
      180:  106-block  1
unconditional  1 taken 180
      189:  106-block  2
branch  2 taken 180
branch  3 taken 9 (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
      180:  108-block  0
unconditional  0 taken 180
     1305:  108-block  1
unconditional  1 taken 1305
     1485:  108-block  2
branch  2 taken 1395
branch  3 taken 90 (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
     1395:  110-block  0
branch  0 taken 90 (fallthrough)
branch  1 taken 1305
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       90:  113-block  0
branch  0 taken 90 (fallthrough)
branch  1 taken 0
       90:  113-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
unconditional  2 never executed
    #####:  116:		    state->supplyCount[i] = 8;
    $$$$$:  116-block  0
unconditional  0 never executed
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
unconditional  0 never executed
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
       90:  122-block  0
unconditional  0 taken 90
        -:  123:		}
       90:  124:	      break;
       90:  124-block  0
unconditional  0 taken 90
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       28:  138:  for (i = 0; i < numPlayers; i++)
        9:  138-block  0
unconditional  0 taken 9
       19:  138-block  1
unconditional  1 taken 19
       28:  138-block  2
branch  2 taken 19
branch  3 taken 9 (fallthrough)
        -:  139:    {
       19:  140:      state->deckCount[i] = 0;
       76:  141:      for (j = 0; j < 3; j++)
       19:  141-block  0
unconditional  0 taken 19
       57:  141-block  1
unconditional  1 taken 57
       76:  141-block  2
branch  2 taken 57
branch  3 taken 19 (fallthrough)
        -:  142:	{
       57:  143:	  state->deck[i][j] = estate;
       57:  144:	  state->deckCount[i]++;
        -:  145:	}
      152:  146:      for (j = 3; j < 10; j++)
       19:  146-block  0
unconditional  0 taken 19
      133:  146-block  1
unconditional  1 taken 133
      152:  146-block  2
branch  2 taken 133
branch  3 taken 19 (fallthrough)
        -:  147:	{
      133:  148:	  state->deck[i][j] = copper;
      133:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       28:  154:  for (i = 0; i < numPlayers; i++)
        9:  154-block  0
unconditional  0 taken 9
       19:  154-block  1
unconditional  1 taken 19
       28:  154-block  2
branch  2 taken 19
branch  3 taken 9 (fallthrough)
        -:  155:    {
       19:  156:      if ( shuffle(i, state) < 0 )
       19:  156-block  0
call    0 returned 19
branch  1 taken 0 (fallthrough)
branch  2 taken 19
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       28:  163:  for (i = 0; i < numPlayers; i++)
        9:  163-block  0
unconditional  0 taken 9
       19:  163-block  1
unconditional  1 taken 19
       28:  163-block  2
branch  2 taken 19
branch  3 taken 9 (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       19:  166:      state->handCount[i] = 0;
       19:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        9:  176-block  0
unconditional  0 taken 9
      243:  176-block  1
unconditional  1 taken 243
      252:  176-block  2
branch  2 taken 243
branch  3 taken 9 (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
        9:  192-block  0
unconditional  0 taken 9
unconditional  1 taken 45
       54:  192-block  1
branch  2 taken 45
branch  3 taken 9 (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
       45:  193-block  0
call    0 returned 45
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        9:  196-block  0
call    0 returned 9
        -:  197:
        9:  198:  return 0;
unconditional  0 taken 9
        -:  199:}
        -:  200:
function shuffle called 25 returned 100% blocks executed 100%
       25:  201:int shuffle(int player, struct gameState *state) {
       25:  201-block  0
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       25:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       25:  209:  if (state->deckCount[player] < 1)
       25:  209-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 22
        3:  210:    return -1;
        3:  210-block  0
unconditional  0 taken 3
       22:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
       22:  211-block  0
call    0 returned 22
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      738:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 22
      738:  214-block  0
branch  1 taken 716
branch  2 taken 22 (fallthrough)
      716:  215:    card = floor(Random() * state->deckCount[player]);
      716:  215-block  0
call    0 returned 716
      716:  216:    newDeck[newDeckPos] = state->deck[player][card];
      716:  217:    newDeckPos++;
    63450:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 716
    62734:  218-block  0
unconditional  1 taken 62734
    63450:  218-block  1
branch  2 taken 62734
branch  3 taken 716 (fallthrough)
    62734:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      716:  221:    state->deckCount[player]--;
      716:  221-block  0
unconditional  0 taken 716
        -:  222:  }
      738:  223:  for (i = 0; i < newDeckPos; i++) {
       22:  223-block  0
unconditional  0 taken 22
      716:  223-block  1
unconditional  1 taken 716
      738:  223-block  2
branch  2 taken 716
branch  3 taken 22 (fallthrough)
      716:  224:    state->deck[player][i] = newDeck[i];
      716:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       25:  228:  return 0;
       22:  228-block  0
unconditional  0 taken 22
       25:  228-block  1
unconditional  1 taken 25
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
    $$$$$:  231-block  0
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 4 returned 100% blocks executed 100%
        4:  311:int numHandCards(struct gameState *state) {
        4:  311-block  0
        4:  312:  return state->handCount[ whoseTurn(state) ];
        4:  312-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 14 returned 100% blocks executed 100%
       14:  346:int whoseTurn(struct gameState *state) {
       14:  346-block  0
       14:  347:  return state->whoseTurn;
       14:  347-block  0
unconditional  0 taken 14
        -:  348:}
        -:  349:
function endTurn called 3 returned 100% blocks executed 100%
        3:  350:int endTurn(struct gameState *state) {
        3:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        3:  353-block  0
call    0 returned 3
        -:  354:
        -:  355:  //Discard hand
       18:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 taken 3
       15:  356-block  0
unconditional  1 taken 15
       18:  356-block  1
branch  2 taken 15
branch  3 taken 3 (fallthrough)
       15:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){
        3:  363-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        2:  364-block  0
unconditional  0 taken 2
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        1:  367-block  0
unconditional  0 taken 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
        3:  380-block  0
unconditional  0 taken 3
unconditional  1 taken 15
       18:  380-block  1
branch  2 taken 15
branch  3 taken 3 (fallthrough)
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
       15:  381-block  0
call    0 returned 15
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        3:  385-block  0
call    0 returned 3
        -:  386:
        3:  387:  return 0;
unconditional  0 taken 3
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  390:int isGameOver(struct gameState *state) {
        5:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        5:  395-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -:  396:    {
        3:  397:      return 1;
        3:  397-block  0
unconditional  0 taken 3
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
        2:  402-block  0
unconditional  0 taken 2
       50:  402-block  1
unconditional  1 taken 50
       52:  402-block  2
branch  2 taken 50
branch  3 taken 2 (fallthrough)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
       50:  404-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 47
        -:  405:	{
        3:  406:	  j++;
        3:  406-block  0
unconditional  0 taken 3
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
        2:  409-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  410:    {
        1:  411:      return 1;
        1:  411-block  0
unconditional  0 taken 1
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        1:  414-block  0
unconditional  0 taken 1
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 71 returned 100% blocks executed 85%
       71:  525:int drawCard(int player, struct gameState *state)
       71:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
       71:  528:  if (state->deckCount[player] <= 0){//Deck is empty
       71:  528-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 70
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        1:  533:    for (i = 0; i < state->discardCount[player];i++){
        1:  533-block  0
unconditional  0 taken 1
    $$$$$:  533-block  1
unconditional  1 never executed
        1:  533-block  2
branch  2 taken 0
branch  3 taken 1 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        1:  542-block  0
call    0 returned 1
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 1
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
        1:  559-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  560:      return -1;
        1:  560-block  0
unconditional  0 taken 1
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
unconditional  0 never executed
        -:  565:  }
        -:  566:
        -:  567:  else{
       70:  568:    int count = state->handCount[player];//Get current hand count for player
       70:  568-block  0
unconditional  0 taken 70
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       70:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       70:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       70:  576:    state->deckCount[player]--;
       70:  577:    state->handCount[player]++;//Increment hand count
       70:  577-block  0
unconditional  0 taken 70
        -:  578:  }
        -:  579:
       70:  580:  return 0;
       70:  580-block  0
unconditional  0 taken 70
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber )
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo:
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645://refactored Adventurer,now its own function.
function playAdventurer called 1 returned 100% blocks executed 93%
        1:  646:void playAdventurer(struct gameState *state, int currentPlayer, int *temphand){
        1:  646-block  0
        1:  647:    int z = 0;
        1:  648:    int drawntreasure = 0;
        -:  649:    int cardDrawn;
        -:  650:
        -:  651:
        4:  652:    while(drawntreasure<2){
        1:  652-block  0
unconditional  0 taken 1
        4:  652-block  1
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:  653:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        3:  653-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  654:            shuffle(currentPlayer, state);
    $$$$$:  654-block  0
call    0 never executed
unconditional  1 never executed
        -:  655:        }
        3:  656:        drawCard(currentPlayer, state);
        3:  656-block  0
call    0 returned 3
        3:  657:        drawCard(currentPlayer, state);//---BUG--- now draws an extra card by calling drawCard twice.
call    0 returned 3
        3:  658:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3:  659:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  659-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:  659-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        2:  660:            drawntreasure++;
        2:  660-block  0
unconditional  0 taken 2
        -:  661:        else{
        1:  662:            temphand[z]=cardDrawn;
        1:  663:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  664:            z++;
        1:  664-block  0
unconditional  0 taken 1
        -:  665:    }
        -:  666:}
        2:  667:while(z-1>=0){
        1:  667-block  0
unconditional  0 taken 1
        2:  667-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  669:    z=z-1;
        1:  669-block  0
unconditional  0 taken 1
        -:  670:    }
        1:  671:}
        -:  672:
        -:  673://refactored council room, now its own function.
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####:  674:void playCouncilRoom(int currentPlayer, int handPos, struct gameState *state){
    $$$$$:  674-block  0
        -:  675:    int i;
        -:  676:    //+2 Cards
    #####:  677:    for (i = 0; i < 3; i++)//--BUG-- Now only allows player to draw 2 cards instead of 3
    $$$$$:  677-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  677-block  1
branch  2 never executed
branch  3 never executed
        -:  678:    {
    #####:  679:        drawCard(currentPlayer, state);
    $$$$$:  679-block  0
call    0 never executed
        -:  680:    }
        -:  681:
        -:  682:    //+1 Buy
    #####:  683:    state->numBuys++;
        -:  684:
        -:  685:    //Each other player draws a card
    #####:  686:    for (i = 0; i < state->numPlayers; i++)
    $$$$$:  686-block  0
unconditional  0 never executed
    $$$$$:  686-block  1
unconditional  1 never executed
    $$$$$:  686-block  2
branch  2 never executed
branch  3 never executed
        -:  687:    {
    #####:  688:        if ( i != currentPlayer )
    $$$$$:  688-block  0
branch  0 never executed
branch  1 never executed
        -:  689:        {
    #####:  690:            drawCard(i, state);
    $$$$$:  690-block  0
call    0 never executed
unconditional  1 never executed
        -:  691:        }
        -:  692:    }
        -:  693:
        -:  694:    //put played card in played card pile
    #####:  695:    discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  695-block  0
call    0 never executed
    #####:  696:}
        -:  697:
        -:  698://refactored smith card into its own function
function playSmithy called 1 returned 100% blocks executed 100%
        1:  699:void playSmithy(int currentPlayer, int handPos, struct gameState *state){
        1:  699-block  0
        -:  700:    int i;
        -:  701:    //+3 Cards
        2:  702:    for (i = 0; i < 1; i++)//---Bug-- Player only gets 2 cards instead of 3
        1:  702-block  0
unconditional  0 taken 1
unconditional  1 taken 1
        2:  702-block  1
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -:  703:    {
        1:  704:        drawCard(currentPlayer, state);
        1:  704-block  0
call    0 returned 1
        -:  705:    }
        -:  706:
        -:  707:    //discard card from hand
        1:  708:    discardCard(handPos, currentPlayer, state, 0);
        1:  708-block  0
call    0 returned 1
        1:  709:}
        -:  710:
        -:  711://refactored great hall card into its own function
function playGreatHall called 1 returned 100% blocks executed 100%
        1:  712:void playGreatHall(int currentPlayer, int handPos, struct gameState *state){
        1:  712-block  0
        -:  713:    //+1 Card
        1:  714:    drawCard(currentPlayer, state);
        1:  714-block  0
call    0 returned 1
        1:  715:    drawCard(currentPlayer, state);//_--BUG-- This Draws two cards rather than 1 by calling drawCard an extra time
call    0 returned 1
        -:  716:
        -:  717:    //+1 Actions
        1:  718:    state->numActions++;
        -:  719:
        -:  720:    //discard card from hand
        1:  721:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  722:}
        -:  723:
function playSteward called 0 returned 0% blocks executed 0%
    #####:  724:void playSteward(int currentPlayer, int handPos, int choice1, int choice2,
    $$$$$:  724-block  0
        -:  725:            int choice3, struct gameState *state){
    #####:  726:if (choice1 == 1)
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
        -:  727:{
        -:  728:    //+2 cards
    #####:  729:    drawCard(currentPlayer, state);
    $$$$$:  729-block  0
call    0 never executed
    #####:  730:    drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  731:}
    #####:  732:else if (choice1 == 2)
    $$$$$:  732-block  0
branch  0 never executed
branch  1 never executed
        -:  733:{
        -:  734:    //+2 coins
    #####:  735:    state->coins = state->coins + 2;
    $$$$$:  735-block  0
unconditional  0 never executed
        -:  736:}
        -:  737:else
        -:  738:{
        -:  739:    //trash 2 cards in hand
    #####:  740:    discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  740-block  0
call    0 never executed
    #####:  741:    discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  742:}
        -:  743:
        -:  744://discard card from hand
    #####:  745:discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  745-block  0
call    0 never executed
    #####:  746:}
        -:  747:
function cardEffect called 4 returned 100% blocks executed 6%
        4:  748:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        4:  748-block  0
        -:  749:{
        -:  750:  int i;
        -:  751:  int j;
        -:  752:  int k;
        -:  753:  int x;
        -:  754:  int index;
        4:  755:  int currentPlayer = whoseTurn(state);
        4:  755-block  0
call    0 returned 4
        4:  756:  int nextPlayer = currentPlayer + 1;
        -:  757:
        4:  758:  int tributeRevealedCards[2] = {-1, -1};
        -:  759:  int temphand[MAX_HAND];// moved above the if statement
        -:  760:  //int drawntreasure=0;
        -:  761:  //int cardDrawn;
        -:  762:  // this is the counter for the temp hand
        4:  763:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  764:    nextPlayer = 0;
    $$$$$:  764-block  0
unconditional  0 never executed
        -:  765:  }
        -:  766:
        -:  767:
        -:  768:  //uses switch to select card and perform actions
        4:  769:  switch( card )
        4:  769-block  0
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 1
branch  8 taken 0
branch  9 taken 1
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  770:    {
        -:  771:    //refactored to call playAdventurer card function
        -:  772:    case adventurer:
        1:  773:            playAdventurer(state, currentPlayer, temphand);
        1:  773-block  0
call    0 returned 1
        1:  774:            return 0;
unconditional  0 taken 1
        -:  775:	//refactored to call playcouncilroom function
        -:  776:    case council_room:
    #####:  777:            playCouncilRoom(currentPlayer, handPos, state);
    $$$$$:  777-block  0
call    0 never executed
    #####:  778:            return 0;
unconditional  0 never executed
        -:  779:
        -:  780:    case feast:
        -:  781:      //gain card with cost up to 5
        -:  782:      //Backup hand
    #####:  783:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  783-block  0
unconditional  0 never executed
    $$$$$:  783-block  1
unconditional  1 never executed
    $$$$$:  783-block  2
branch  2 never executed
branch  3 never executed
    #####:  784:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  785:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  786:      }
        -:  787:      //Backup hand
        -:  788:
        -:  789:      //Update Coins for Buy
    #####:  790:      updateCoins(currentPlayer, state, 5);
    $$$$$:  790-block  0
call    0 never executed
    #####:  791:      x = 1;//Condition to loop on
    #####:  792:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  792-block  0
branch  1 never executed
branch  2 never executed
    #####:  793:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  794:	  if (DEBUG)
        -:  795:	    printf("None of that card left, sorry!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  799:	  }
        -:  800:	}
    #####:  801:	else if (state->coins < getCost(choice1)){
    $$$$$:  801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  802:	  printf("That card is too expensive!\n");
    $$$$$:  802-block  0
call    0 never executed
unconditional  1 never executed
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  806:	  }
        -:  807:	}
        -:  808:	else{
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
    #####:  814:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  814-block  0
call    0 never executed
    #####:  815:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  816:
        -:  817:	  if (DEBUG){
        -:  818:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:	  }
        -:  820:
        -:  821:	}
        -:  822:      }
        -:  823:
        -:  824:      //Reset Hand
    #####:  825:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  825-block  0
unconditional  0 never executed
    $$$$$:  825-block  1
unconditional  1 never executed
    $$$$$:  825-block  2
branch  2 never executed
branch  3 never executed
    #####:  826:	state->hand[currentPlayer][i] = temphand[i];
    #####:  827:	temphand[i] = -1;
        -:  828:      }
        -:  829:      //Reset Hand
        -:  830:
    #####:  831:      return 0;
    $$$$$:  831-block  0
unconditional  0 never executed
        -:  832:
        -:  833:    case gardens:
    #####:  834:      return -1;
    $$$$$:  834-block  0
unconditional  0 never executed
        -:  835:
        -:  836:    case mine:
    #####:  837:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  838:
    #####:  839:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:	}
        -:  843:
    #####:  844:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  844-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  844-block  1
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
    $$$$$:  846-block  0
unconditional  0 never executed
        -:  847:	}
        -:  848:
    #####:  849:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  849-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  850:	{
    #####:  851:	  return -1;
    $$$$$:  851-block  0
unconditional  0 never executed
        -:  852:	}
        -:  853:
    #####:  854:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  854-block  0
call    0 never executed
        -:  855:
        -:  856:      //discard card from hand
    #####:  857:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  858:
        -:  859:      //discard trashed card
    #####:  860:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  860-block  0
unconditional  1 never executed
    $$$$$:  860-block  1
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  862-block  0
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      discardCard(i, currentPlayer, state, 0);
    $$$$$:  864-block  0
call    0 never executed
    #####:  865:	      break;
unconditional  0 never executed
        -:  866:	    }
        -:  867:	}
        -:  868:
    #####:  869:      return 0;
    $$$$$:  869-block  0
unconditional  0 never executed
        -:  870:
        -:  871:    case remodel:
    #####:  872:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  873:
    #####:  874:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  874-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  875:	{
    #####:  876:	  return -1;
    $$$$$:  876-block  0
unconditional  0 never executed
        -:  877:	}
        -:  878:
    #####:  879:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  879-block  0
call    0 never executed
        -:  880:
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  883:
        -:  884:      //discard trashed card
    #####:  885:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  885-block  0
unconditional  1 never executed
    $$$$$:  885-block  1
branch  2 never executed
branch  3 never executed
        -:  886:	{
    #####:  887:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  887-block  0
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      discardCard(i, currentPlayer, state, 0);
    $$$$$:  889-block  0
call    0 never executed
    #####:  890:	      break;
unconditional  0 never executed
        -:  891:	    }
        -:  892:	}
        -:  893:
        -:  894:
    #####:  895:      return 0;
    $$$$$:  895-block  0
unconditional  0 never executed
        -:  896:
        -:  897:    //refactored to call playSmithy function
        -:  898:    case smithy:
        1:  899:            playSmithy(currentPlayer, handPos, state);
        1:  899-block  0
call    0 returned 1
        1:  900:            return 0;
unconditional  0 taken 1
        -:  901:            
        -:  902:    case village:
        -:  903:      //+1 Card
        1:  904:      drawCard(currentPlayer, state);
        1:  904-block  0
call    0 returned 1
        -:  905:      
        -:  906:      //+2 Actions
        1:  907:      state->numActions = state->numActions + 2;
        -:  908:      
        -:  909:      //discard played card from hand
        1:  910:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  911:      return 0;
unconditional  0 taken 1
        -:  912:
        -:  913:    case baron:
    #####:  914:      state->numBuys++;//Increase buys by 1!
    #####:  915:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  915-block  0
branch  0 never executed
branch  1 never executed
    #####:  916:	int p = 0;//Iterator for hand!
    #####:  917:	int card_not_discarded = 1;//Flag for discard set!
    #####:  918:	while(card_not_discarded){
    $$$$$:  918-block  0
unconditional  0 never executed
    $$$$$:  918-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  918-block  2
unconditional  3 never executed
    #####:  919:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  919-block  0
branch  0 never executed
branch  1 never executed
    #####:  920:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  921:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  922:	    state->discardCount[currentPlayer]++;
    #####:  923:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  923-block  0
unconditional  0 never executed
    $$$$$:  923-block  1
unconditional  1 never executed
    $$$$$:  923-block  2
branch  2 never executed
branch  3 never executed
    #####:  924:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  925:	    }
    #####:  926:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  927:	    state->handCount[currentPlayer]--;
    #####:  928:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  928-block  0
unconditional  0 never executed
        -:  929:	  }
    #####:  930:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  930-block  0
branch  0 never executed
branch  1 never executed
        -:  931:	    if(DEBUG) {
        -:  932:	      printf("No estate cards in your hand, invalid choice\n");
        -:  933:	      printf("Must gain an estate if there are any\n");
        -:  934:	    }
    #####:  935:	    if (supplyCount(estate, state) > 0){
    $$$$$:  935-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  936:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  936-block  0
call    0 never executed
    #####:  937:	      state->supplyCount[estate]--;//Decrement estates
    #####:  938:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:		isGameOver(state);
    $$$$$:  939-block  0
call    0 never executed
unconditional  1 never executed
        -:  940:	      }
        -:  941:	    }
    #####:  942:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  942-block  0
unconditional  0 never executed
        -:  943:	  }
        -:  944:
        -:  945:	  else{
    #####:  946:	    p++;//Next card
    $$$$$:  946-block  0
unconditional  0 never executed
        -:  947:	  }
        -:  948:	}
        -:  949:      }
        -:  950:
        -:  951:      else{
    #####:  952:	if (supplyCount(estate, state) > 0){
    $$$$$:  952-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  953-block  0
call    0 never executed
    #####:  954:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  955:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:	    isGameOver(state);
    $$$$$:  956-block  0
call    0 never executed
unconditional  1 never executed
        -:  957:	  }
        -:  958:	}
        -:  959:      }
        -:  960:
        -:  961:
    #####:  962:      return 0;
    $$$$$:  962-block  0
unconditional  0 never executed
        -:  963:		//refactored great hall
        -:  964:    case great_hall:
        1:  965:            playGreatHall(currentPlayer, handPos, state);
        1:  965-block  0
call    0 returned 1
        1:  966:            return 0;
unconditional  0 taken 1
        -:  967:
        -:  968:    case minion:
        -:  969:      //+1 action
    #####:  970:      state->numActions++;
        -:  971:
        -:  972:      //discard card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  973-block  0
call    0 never executed
        -:  974:
    #####:  975:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  state->coins = state->coins + 2;
    $$$$$:  977-block  0
unconditional  0 never executed
        -:  978:	}
        -:  979:
    #####:  980:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  980-block  0
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //discard hand
    #####:  983:	  while(numHandCards(state) > 0)
    $$$$$:  983-block  0
unconditional  0 never executed
    $$$$$:  983-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  984:	    {
    #####:  985:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  985-block  0
call    0 never executed
unconditional  1 never executed
        -:  986:	    }
        -:  987:
        -:  988:	  //draw 4
    #####:  989:	  for (i = 0; i < 4; i++)
    $$$$$:  989-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  989-block  1
branch  2 never executed
branch  3 never executed
        -:  990:	    {
    #####:  991:	      drawCard(currentPlayer, state);
    $$$$$:  991-block  0
call    0 never executed
        -:  992:	    }
        -:  993:
        -:  994:	  //other players discard hand and redraw if hand size > 4
    #####:  995:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  995-block  0
unconditional  0 never executed
    $$$$$:  995-block  1
unconditional  1 never executed
    $$$$$:  995-block  2
branch  2 never executed
branch  3 never executed
        -:  996:	    {
    #####:  997:	      if (i != currentPlayer)
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:		{
    #####:  999:		  if ( state->handCount[i] > 4 )
    $$$$$:  999-block  0
branch  0 never executed
branch  1 never executed
        -: 1000:		    {
        -: 1001:		      //discard hand
    #####: 1002:		      while( state->handCount[i] > 0 )
    $$$$$: 1002-block  0
unconditional  0 never executed
    $$$$$: 1002-block  1
branch  1 never executed
branch  2 never executed
        -: 1003:			{
    #####: 1004:			  discardCard(handPos, i, state, 0);
    $$$$$: 1004-block  0
call    0 never executed
unconditional  1 never executed
        -: 1005:			}
        -: 1006:
        -: 1007:		      //draw 4
    #####: 1008:		      for (j = 0; j < 4; j++)
    $$$$$: 1008-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1008-block  1
branch  2 never executed
branch  3 never executed
        -: 1009:			{
    #####: 1010:			  drawCard(i, state);
    $$$$$: 1010-block  0
call    0 never executed
        -: 1011:			}
        -: 1012:		    }
        -: 1013:		}
        -: 1014:	    }
        -: 1015:
        -: 1016:	}
    #####: 1017:      return 0;
    $$$$$: 1017-block  0
unconditional  0 never executed
        -: 1018:		//refactored steward
        -: 1019:    case steward:
    #####: 1020:            playSteward(currentPlayer, handPos, choice1, choice2, choice3, state);
    $$$$$: 1020-block  0
call    0 never executed
    #####: 1021:            return 0;
unconditional  0 never executed
        -: 1022:
        -: 1023:    case tribute:
    #####: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1024-block  0
branch  0 never executed
branch  1 never executed
    #####: 1025:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
    $$$$$: 1027-block  0
unconditional  0 never executed
        -: 1028:	}
    #####: 1029:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1029-block  0
branch  0 never executed
branch  1 never executed
    #####: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1031:	  state->discardCount[nextPlayer]--;
    $$$$$: 1031-block  0
unconditional  0 never executed
        -: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
        -: 1039:      }
        -: 1040:
        -: 1041:      else{
    #####: 1042:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1042-block  0
branch  0 never executed
branch  1 never executed
    #####: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1043-block  0
unconditional  0 never executed
    $$$$$: 1043-block  1
unconditional  1 never executed
    $$$$$: 1043-block  2
branch  2 never executed
branch  3 never executed
    #####: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:	    state->deckCount[nextPlayer]++;
    #####: 1046:	    state->discard[nextPlayer][i] = -1;
    #####: 1047:	    state->discardCount[nextPlayer]--;
        -: 1048:	  }
        -: 1049:
    #####: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1050-block  0
call    0 never executed
unconditional  1 never executed
        -: 1051:	}
    #####: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
    #####: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
    $$$$$: 1057-block  0
unconditional  0 never executed
        -: 1058:      }
        -: 1059:
    #####: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
    #####: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1062:	state->playedCardCount++;
    #####: 1063:	tributeRevealedCards[1] = -1;
    $$$$$: 1063-block  0
unconditional  0 never executed
        -: 1064:      }
        -: 1065:
    #####: 1066:      for (i = 0; i <= 2; i ++){
    $$$$$: 1066-block  0
unconditional  0 never executed
    $$$$$: 1066-block  1
unconditional  1 never executed
    $$$$$: 1066-block  2
branch  2 never executed
branch  3 never executed
    #####: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1067-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1067-block  2
branch  4 never executed
branch  5 never executed
    #####: 1068:	  state->coins += 2;
    $$$$$: 1068-block  0
unconditional  0 never executed
        -: 1069:	}
        -: 1070:
    #####: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1071-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1071-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1071-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1071-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1071-block  4
branch  8 never executed
branch  9 never executed
    #####: 1072:	  drawCard(currentPlayer, state);
    $$$$$: 1072-block  0
call    0 never executed
    #####: 1073:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1074:	}
        -: 1075:	else{//Action Card
    #####: 1076:	  state->numActions = state->numActions + 2;
    $$$$$: 1076-block  0
unconditional  0 never executed
        -: 1077:	}
        -: 1078:      }
        -: 1079:
    #####: 1080:      return 0;
    $$$$$: 1080-block  0
unconditional  0 never executed
        -: 1081:
        -: 1082:    case ambassador:
    #####: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
    #####: 1085:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1085-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1085-block  1
branch  2 never executed
branch  3 never executed
        -: 1086:	{
    #####: 1087:	  return -1;
    $$$$$: 1087-block  0
unconditional  0 never executed
        -: 1088:	}
        -: 1089:
    #####: 1090:      if (choice1 == handPos)
    $$$$$: 1090-block  0
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
    $$$$$: 1092-block  0
unconditional  0 never executed
        -: 1093:	}
        -: 1094:
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1095-block  0
unconditional  0 never executed
    $$$$$: 1095-block  1
unconditional  1 never executed
    $$$$$: 1095-block  2
branch  2 never executed
branch  3 never executed
        -: 1096:	{
    #####: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1097-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1097-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1097-block  2
branch  4 never executed
branch  5 never executed
        -: 1098:	    {
    #####: 1099:	      j++;
    $$$$$: 1099-block  0
unconditional  0 never executed
        -: 1100:	    }
        -: 1101:	}
    #####: 1102:      if (j < choice2)
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  return -1;
    $$$$$: 1104-block  0
unconditional  0 never executed
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG)
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
    #####: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:
        -: 1113:      //each other player gains a copy of revealed card
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1114-block  0
unconditional  0 never executed
    $$$$$: 1114-block  1
unconditional  1 never executed
    $$$$$: 1114-block  2
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1118-block  0
call    0 never executed
unconditional  1 never executed
        -: 1119:	    }
        -: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1123-block  0
call    0 never executed
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
    #####: 1126:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1126-block  0
unconditional  1 never executed
    $$$$$: 1126-block  1
branch  2 never executed
branch  3 never executed
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1128-block  0
unconditional  0 never executed
    $$$$$: 1128-block  1
unconditional  1 never executed
    $$$$$: 1128-block  2
branch  2 never executed
branch  3 never executed
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1130-block  0
branch  0 never executed
branch  1 never executed
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1132-block  0
call    0 never executed
    #####: 1133:		  break;
unconditional  0 never executed
        -: 1134:		}
        -: 1135:	    }
        -: 1136:	}
        -: 1137:
    #####: 1138:      return 0;
    $$$$$: 1138-block  0
unconditional  0 never executed
        -: 1139:
        -: 1140:    case cutpurse:
        -: 1141:
    #####: 1142:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1142-block  0
call    0 never executed
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1143-block  0
unconditional  1 never executed
    $$$$$: 1143-block  1
branch  2 never executed
branch  3 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1147-block  0
unconditional  0 never executed
    $$$$$: 1147-block  1
unconditional  1 never executed
    $$$$$: 1147-block  2
branch  2 never executed
branch  3 never executed
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
    $$$$$: 1149-block  0
branch  0 never executed
branch  1 never executed
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
    $$$$$: 1151-block  0
call    0 never executed
    #####: 1152:		      break;
unconditional  0 never executed
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
    $$$$$: 1154-block  0
branch  0 never executed
branch  1 never executed
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1156-block  0
unconditional  0 never executed
    $$$$$: 1156-block  1
unconditional  1 never executed
    $$$$$: 1156-block  2
branch  2 never executed
branch  3 never executed
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1160:			}
    #####: 1161:		      break;
    $$$$$: 1161-block  0
unconditional  0 never executed
        -: 1162:		    }
        -: 1163:		}
        -: 1164:
        -: 1165:	    }
        -: 1166:
        -: 1167:	}
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1170-block  0
call    0 never executed
        -: 1171:
    #####: 1172:      return 0;
unconditional  0 never executed
        -: 1173:
        -: 1174:
        -: 1175:    case embargo:
        -: 1176:      //+2 Coins
    #####: 1177:      state->coins = state->coins + 2;
        -: 1178:
        -: 1179:      //see if selected pile is in play
    #####: 1180:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1180-block  0
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  return -1;
    $$$$$: 1182-block  0
unconditional  0 never executed
        -: 1183:	}
        -: 1184:
        -: 1185:      //add embargo token to selected supply pile
    #####: 1186:      state->embargoTokens[choice1]++;
        -: 1187:
        -: 1188:      //trash card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1189-block  0
call    0 never executed
    #####: 1190:      return 0;
unconditional  0 never executed
        -: 1191:
        -: 1192:    case outpost:
        -: 1193:      //set outpost flag
    #####: 1194:      state->outpostPlayed++;
        -: 1195:
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1197-block  0
call    0 never executed
    #####: 1198:      return 0;
unconditional  0 never executed
        -: 1199:
        -: 1200:    case salvager:
        -: 1201:      //+1 buy
    #####: 1202:      state->numBuys++;
        -: 1203:
    #####: 1204:      if (choice1)
    $$$$$: 1204-block  0
branch  0 never executed
branch  1 never executed
        -: 1205:	{
        -: 1206:	  //gain coins equal to trashed card
    #####: 1207:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1207-block  0
call    0 never executed
call    1 never executed
        -: 1208:	  //trash card
    #####: 1209:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1210:	}
        -: 1211:
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1213-block  0
call    0 never executed
    #####: 1214:      return 0;
unconditional  0 never executed
        -: 1215:
        -: 1216:    case sea_hag:
    #####: 1217:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1217-block  0
unconditional  0 never executed
    $$$$$: 1217-block  1
unconditional  1 never executed
    $$$$$: 1217-block  2
branch  2 never executed
branch  3 never executed
    #####: 1218:	if (i != currentPlayer){
    $$$$$: 1218-block  0
branch  0 never executed
branch  1 never executed
    #####: 1219:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1220:	  state->discardCount[i]++;
    #####: 1221:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1221-block  0
unconditional  0 never executed
        -: 1222:	}
        -: 1223:      }
    #####: 1224:      return 0;
    $$$$$: 1224-block  0
unconditional  0 never executed
        -: 1225:
        -: 1226:    case treasure_map:
        -: 1227:      //search hand for another treasure_map
    #####: 1228:      index = -1;
    #####: 1229:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1229-block  0
unconditional  0 never executed
    $$$$$: 1229-block  1
unconditional  1 never executed
    $$$$$: 1229-block  2
branch  2 never executed
branch  3 never executed
        -: 1230:	{
    #####: 1231:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1231-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1231-block  1
branch  2 never executed
branch  3 never executed
        -: 1232:	    {
    #####: 1233:	      index = i;
    #####: 1234:	      break;
    $$$$$: 1234-block  0
unconditional  0 never executed
        -: 1235:	    }
        -: 1236:	}
    #####: 1237:      if (index > -1)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
        -: 1238:	{
        -: 1239:	  //trash both treasure cards
    #####: 1240:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1240-block  0
call    0 never executed
    #####: 1241:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1242:
        -: 1243:	  //gain 4 Gold cards
    #####: 1244:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1244-block  0
branch  2 never executed
branch  3 never executed
        -: 1245:	    {
    #####: 1246:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1246-block  0
call    0 never executed
        -: 1247:	    }
        -: 1248:
        -: 1249:	  //return success
    #####: 1250:	  return 1;
    $$$$$: 1250-block  0
unconditional  0 never executed
        -: 1251:	}
        -: 1252:
        -: 1253:      //no second treasure_map found in hand
    #####: 1254:      return -1;
    $$$$$: 1254-block  0
unconditional  0 never executed
        -: 1255:    }
        -: 1256:
        4: 1257:  return -1;
    $$$$$: 1257-block  0
unconditional  0 never executed
        4: 1257-block  1
unconditional  1 taken 4
        -: 1258:}
        -: 1259:
function discardCard called 9 returned 100% blocks executed 89%
        9: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        9: 1260-block  0
        -: 1261:{
        -: 1262:
        -: 1263:  //if card is not trashed, added to Played pile
        9: 1264:  if (trashFlag < 1)
        9: 1264-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        -: 1265:    {
        -: 1266:      //add card to played pile
        9: 1267:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        9: 1268:      state->playedCardCount++;
        9: 1268-block  0
unconditional  0 taken 9
        -: 1269:    }
        -: 1270:
        -: 1271:  //set played card to -1
        9: 1272:  state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:  //remove card from player's hand
        9: 1275:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        9: 1275-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        1: 1278-block  0
unconditional  0 taken 1
        -: 1279:    }
        8: 1280:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        8: 1280-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
    $$$$$: 1283-block  0
unconditional  0 never executed
        -: 1284:    }
        -: 1285:  else
        -: 1286:    {
        -: 1287:      //replace discarded card with last card in hand
        8: 1288:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:      //set last card to -1
        8: 1290:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:      //reduce number of cards in hand
        8: 1292:      state->handCount[currentPlayer]--;
        8: 1292-block  0
unconditional  0 taken 8
        -: 1293:    }
        -: 1294:
        9: 1295:  return 0;
        9: 1295-block  0
unconditional  0 taken 9
        -: 1296:}
        -: 1297:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1298-block  0
        -: 1299:{
        -: 1300:  //Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1303:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1304:    {
    #####: 1305:      return -1;
    $$$$$: 1305-block  0
unconditional  0 never executed
        -: 1306:    }
        -: 1307:
        -: 1308:  //added card for [whoseTurn] current player:
        -: 1309:  // toFlag = 0 : add to discard
        -: 1310:  // toFlag = 1 : add to deck
        -: 1311:  // toFlag = 2 : add to hand
        -: 1312:
    #####: 1313:  if (toFlag == 1)
    $$$$$: 1313-block  0
branch  0 never executed
branch  1 never executed
        -: 1314:    {
    #####: 1315:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1316:      state->deckCount[player]++;
    $$$$$: 1316-block  0
unconditional  0 never executed
        -: 1317:    }
    #####: 1318:  else if (toFlag == 2)
    $$$$$: 1318-block  0
branch  0 never executed
branch  1 never executed
        -: 1319:    {
    #####: 1320:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1321:      state->handCount[player]++;
    $$$$$: 1321-block  0
unconditional  0 never executed
        -: 1322:    }
        -: 1323:  else
        -: 1324:    {
    #####: 1325:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1326:      state->discardCount[player]++;
    $$$$$: 1326-block  0
unconditional  0 never executed
        -: 1327:    }
        -: 1328:
        -: 1329:  //decrease number in supply pile
    #####: 1330:  state->supplyCount[supplyPos]--;
        -: 1331:
    #####: 1332:  return 0;
    $$$$$: 1332-block  0
unconditional  0 never executed
        -: 1333:}
        -: 1334:
function updateCoins called 14 returned 100% blocks executed 82%
       14: 1335:int updateCoins(int player, struct gameState *state, int bonus)
       14: 1335-block  0
        -: 1336:{
        -: 1337:  int i;
        -: 1338:
        -: 1339:  //reset coin count
       14: 1340:  state->coins = 0;
        -: 1341:
        -: 1342:  //add coins for each Treasure card in player's hand
       88: 1343:  for (i = 0; i < state->handCount[player]; i++)
       14: 1343-block  0
unconditional  0 taken 14
       74: 1343-block  1
unconditional  1 taken 74
       88: 1343-block  2
branch  2 taken 74
branch  3 taken 14 (fallthrough)
        -: 1344:    {
       74: 1345:      if (state->hand[player][i] == copper)
       74: 1345-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 22
        -: 1346:	{
       52: 1347:	  state->coins += 1;
       52: 1347-block  0
unconditional  0 taken 52
        -: 1348:	}
       22: 1349:      else if (state->hand[player][i] == silver)
       22: 1349-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -: 1350:	{
    #####: 1351:	  state->coins += 2;
    $$$$$: 1351-block  0
unconditional  0 never executed
        -: 1352:	}
       22: 1353:      else if (state->hand[player][i] == gold)
       22: 1353-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -: 1354:	{
    #####: 1355:	  state->coins += 3;
    $$$$$: 1355-block  0
unconditional  0 never executed
        -: 1356:	}
        -: 1357:    }
        -: 1358:
        -: 1359:  //add bonus
       14: 1360:  state->coins += bonus;
        -: 1361:
       14: 1362:  return 0;
       14: 1362-block  0
unconditional  0 taken 14
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
